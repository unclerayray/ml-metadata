/* Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

syntax = "proto2";

package ml_metadata;

import "ml_metadata/proto/metadata_store.proto";

// Input configurations for mlmd_bench.
message MLMDBenchConfig {
  // Connection configuration (sqlite, mysql...) for mlmd_bench.
  optional ConnectionConfig mlmd_config = 1;
  // An array of workload configurations specified by the users.
  repeated WorkloadConfig workload_configs = 2;
  // Multi-threaded environment configuration for executing the workloads.
  optional ThreadEnvConfig thread_env_config = 3;
}

// A uniform distribution within range [minimum, maximum].
message UniformDistribution {
  optional int64 minimum = 1;
  optional int64 maximum = 2;
}

// A categorical distribution generated w.r.t. a Dirichlet prior with a
// concentration parameter `dirichlet_alpha`.
message CategoricalDistribution {
  // A special case in Dirichlet distribution is applied here where all of
  // elements of alpha have the same value `dirichlet_alpha`.
  optional double dirichlet_alpha = 1;
}

// A Zipf distribution with a configurable `skew`, for modeling the
// popularity of heavily used input artifacts.
message ZipfDistribution {
  // The skew parameter for a Zipf distribution.
  optional double skew = 1;
}

// Creates and updates types: ArtifactTypes / ExecutionTypes / ContextTypes.
message FillTypesConfig {
  // The FillTypesConfig can be set to insert or update types.
  optional bool update = 1;
  enum Specification {
    UNKNOWN = 0;
    ARTIFACT_TYPE = 1;
    EXECUTION_TYPE = 2;
    CONTEXT_TYPE = 3;
  }
  // Indicates which types to be filled.
  optional Specification specification = 2;
  // Specifies the number of properties for each type, modeled by a
  // uniform distribution.
  optional UniformDistribution num_properties = 3;
}

// Creates and updates nodes: Artifacts / Executions / Contexts.
message FillNodesConfig {
  // The FillNodesConfig can be set to insert or update nodes.
  optional bool update = 1;
  enum Specification {
    UNKNOWN = 0;
    ARTIFACT = 1;
    EXECUTION = 2;
    CONTEXT = 3;
  }
  // Indicates which type of nodes to be filled.
  optional Specification specification = 2;
  // Specifies the number of properties for each node; modeled by a
  // uniform distribution.
  optional UniformDistribution num_properties = 3;
  // Specifies the string length for string-valued properties of each node;
  // modeled by a uniform distribution.
  optional UniformDistribution string_value_bytes = 4;
  // Specifies the number of nodes to be filled per request; modeled by a
  // uniform distribution.
  optional UniformDistribution num_nodes = 5;
}

// Creates context edges: Attributions / Associations.
message FillContextEdgesConfig {
  enum Specification {
    UNKNOWN = 0;
    ATTRIBUTION = 1;
    ASSOCIATION = 2;
  }
  // Indicates which type of context's edge to be filled.
  optional Specification specification = 1;
  // Describes the popularity for non context nodes(artifacts, executions),
  // modeled by a categorical distribution with a Dirichlet prior.
  optional CategoricalDistribution non_context_node_popularity = 2;
  // Describes the popularity for context nodes,
  // modeled by a categorical distribution with a Dirichlet prior.
  optional CategoricalDistribution context_node_popularity = 3;
  // Specifies the number of context edges to be filled per request,
  // modeled by a uniform distribution.
  optional UniformDistribution num_edges = 4;
}

// Creates input / output events.
message FillEventsConfig {
  enum Specification {
    UNKNOWN = 0;
    INPUT = 1;
    OUTPUT = 2;
  }
  // Indicates the type (input / output) of the events.
  optional Specification specification = 1;
  // Describes the popularity for the execution nodes,
  // modeled by a categorical distribution with a Dirichlet prior.
  optional CategoricalDistribution execution_node_popularity = 2;
  // Describe the popularity for the artifact nodes.
  oneof artifact_node_popularity {
    // The popularity distribution for artifact node's will be a
    // categorical distribution if the event is an output event.
    CategoricalDistribution artifact_node_popularity_categorical = 3;
    // The popularity distribution for artifact node's will be a
    // zipf distribution if the event is an input event.
    ZipfDistribution artifact_node_popularity_zipf = 4;
  }
  // Specifies the number of events to be filled per request,
  // modeled by a uniform distribution.
  optional UniformDistribution num_events = 5;
}

// Reads types: ArtifactType / ExecutionType / ContextType.
message ReadTypesConfig {
  enum Specification {
    UNKNOWN = 0;
    ALL_ARTIFACT_TYPES = 1;
    ALL_EXECUTION_TYPES = 2;
    ALL_CONTEXT_TYPES = 3;
    ARTIFACT_TYPES_BY_ID = 4;
    EXECUTION_TYPES_BY_ID = 5;
    CONTEXT_TYPES_BY_ID = 6;
    ARTIFACT_TYPE_BY_NAME = 7;
    EXECUTION_TYPE_BY_NAME = 8;
    CONTEXT_TYPE_BY_NAME = 9;
  }
  // Indicates which types to be read and how they are read from db.
  optional Specification specification = 1;
  // Specifies the number of ids to be filled per request for
  // ARTIFACT_TYPES_BY_IDs / EXECUTION_TYPES_BY_IDs / CONTEXT_TYPES_BY_IDs
  // specification. Modeled by a uniform distribution.
  optional UniformDistribution maybe_num_ids = 2;
}

// Reads nodes: Artifacts / Executions / Contexts by their properties.
message ReadNodesByPropertiesConfig {
  enum Specification {
    UNKNOWN = 0;
    ARTIFACTS_BY_ID = 1;
    EXECUTIONS_BY_ID = 2;
    CONTEXTS_BY_ID = 3;
    ARTIFACTS_BY_TYPE = 4;
    EXECUTIONS_BY_TYPE = 5;
    CONTEXTS_BY_TYPE = 6;
    ARTIFACT_BY_TYPE_AND_NAME = 7;
    EXECUTION_BY_TYPE_AND_NAME = 8;
    CONTEXT_BY_TYPE_AND_NAME = 9;
    ARTIFACTS_BY_URI = 10;
  }
  // Indicates which property (id, type, name, etc.)
  // should be used to get nodes (artifacts, executions, contexts).
  optional Specification specification = 1;
  // When the specification is ARTIFACTS_BY_ID / EXECUTIONS_BY_ID /
  // CONTEXTS_BY_ID, `num_of_parameters` refers to the number of ids
  // per request.
  // When the specification is ARTIFACTS_BY_URI, then
  // `num_of_parameters` refers to the number of uris per request.
  // Modeled by a uniform distribution.
  optional UniformDistribution num_of_parameters = 2;
}

// Reads nodes by traverse between Artifacts / Executions and Contexts.
message ReadNodesViaContextEdgesConfig {
  enum Specification {
    UNKNOWN = 0;
    CONTEXTS_BY_ARTIFACT = 1;
    CONTEXTS_BY_EXECUTION = 2;
    ARTIFACTS_BY_CONTEXT = 3;
    EXECUTIONS_BY_CONTEXT = 4;
  }
  // Indicates which transverse API to use for getting nodes.
  optional Specification specification = 1;
}

// Reads Events by Artifact / Execution IDs.
message ReadEventsConfig {
  enum Specification {
    UNKNOWN = 0;
    EVENTS_BY_ARTIFACT_ID = 1;
    EVENTS_BY_EXECUTION_ID = 2;
  }
  // Indicates whether to use artifact or execution ids to get events.
  optional Specification specification = 1;
  // Specifies the number of ids used to get event per request.
  // Modeled by a uniform distribution.
  optional UniformDistribution num_ids = 2;
}

// The mlmd_bench workload config.
message WorkloadConfig {
  oneof workload_config {
    FillTypesConfig fill_types_config = 1;
    FillNodesConfig fill_nodes_config = 3;
    FillContextEdgesConfig fill_context_edges_config = 4;
    FillEventsConfig fill_events_config = 5;
    ReadTypesConfig read_types_config = 6;
    ReadNodesByPropertiesConfig read_nodes_by_properties_config = 7;
    ReadNodesViaContextEdgesConfig read_nodes_via_context_edges_config = 8;
    ReadEventsConfig read_events_config = 9;
  }
  // The number of operations to be run in parallel.
  optional int64 num_operations = 2;
}

// The configuration for the multi-threaded environment which executes the
// workloads.
message ThreadEnvConfig {
  // The number of threads in the thread pool.
  optional int32 num_threads = 1;
}

// The output report for mlmd_bench.
message MLMDBenchReport {
  // A list of summaries for the array of workload configurations.
  repeated WorkloadConfigResult summaries = 1;
}

// The performance result for each workload configuration.
message WorkloadConfigResult {
  // The workload configuration that this result belongs to.
  optional WorkloadConfig workload_config = 1;
  // Microsecond / operations for the current workload_config.
  optional double microseconds_per_operation = 2;
  // Bytes / second for the current workload_config.
  optional double bytes_per_second = 3;
}
